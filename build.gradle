plugins {
    id 'idea'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'maven-publish'
}

version = '0.1.0'
group = 'lekavar.lma' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'drinkbeer-next-${artifact_minecraft_version}'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            arg '-mixin.config=drinkbeer.mixins.json'

            mods {
                drinkbeer {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            arg '-mixin.config=drinkbeer.mixins.json'

            mods {
                drinkbeer {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'drinkbeer', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                drinkbeer {
                    source sourceSets.main
                }
            }
        }
    }
}

// include JEI plugin from src level
sourceSets.main {
    java {
        srcDirs 'JustEnoughKeg/src/main/java'
    }
    resources {
        srcDirs 'JustEnoughKeg/src/main/resources'
    }
}

processResources {
    duplicatesStrategy = "exclude" // avoid duplicated meta configs like mods.toml
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'drinkbeer.refmap.json'
    config 'drinkbeer.mixins.json'

    debug.verbose = true
    debug.export = true
}

repositories {
    mavenCentral()
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files
        url "https://dvs1.progwml6.com/files/maven/"
        name "Progwml6 maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Jade
    implementation fg.deobf("curse.maven:jade-${jade_project_id}:${jade_file_id}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "drinkbeer",
            "Specification-Vendor": "lma.lekavar",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"lma.lekavar",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'MixinConfigs': 'drinkbeer.mixins.json'
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
